// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        hsv: { value: [1.0,0.0,0.0,0.0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_CHANGEHSV
    uniform HsvBlock{
        vec4 hsv;
    };
    // rgb转换hsv
    vec3 rgb2hsv(vec3 c){
        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
        float d = q.x - min(q.w, q.y);
        float e = 1.0e-10;
        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
    }
    //hsv 转换 rgb
    vec3 hsv2rgb(vec3 c){
        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
    }
  #endif

  void main () {
    //1.获取贴图的RGB颜色o
    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);

    #if USE_CHANGEHSV
      //2.把对应RGB颜色转换到HSV颜色值
      vec3 temp_hsv = rgb2hsv(o.xyz);
      //处于r = (60-180范围的值为1，其余范围为0)
      float r = step(60.0/360.0, temp_hsv.x)-step(180.0/360.0, temp_hsv.x);
      //3.叠加相应传入的hsv叠加值 x:色相0~360 y:饱和度0~1 z:明度0~1
      temp_hsv.xyz += hsv.xyz;
      // temp_hsv.xyz = mod(temp_hsv.xyz, 1.0);
      //4.再转回去RGB颜色值
      o.xyz = hsv2rgb(temp_hsv);
    #endif

    gl_FragColor = o;
  }
}%
      // float r = step(60.9/360.0, temp_hsv.x)-step(179.9/360.0, temp_hsv.x);